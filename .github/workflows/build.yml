name: Build (and packaging)

on:
  workflow_call:
    inputs:
      os-version:
        required: true
        type: string
      packaging:
        required: true
        type: boolean
      dist-packaging:
        default: false
        type: boolean

jobs:
  build-and-packaging:
    name: Build (and packaging)
    runs-on: ubuntu-latest
    container:
      image: fribdaq/frib-${{ inputs.os-version }}-ci
      options: --cpus 2
    steps:
      - uses: actions/checkout@v4
      - name: autoreconf
        working-directory: ./main
        run: |
          autoupdate
          autoreconf -if
      - name: Configure libtcl++
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        working-directory: ./main
        shell: bash
        run: |
          ./tcl++incorp
      - name: Incorporate unified format
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        working-directory: ./main
        shell: bash
        run: |
          
          ./unifiedfmt-incorp.sh
      - name: Incorporate DDAS format
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        working-directory: ./main
        shell: bash
        run: |
          ./ddasfmt-incorp.sh
      - name: Creating build directory
        run: mkdir main/oot
      - name: Configuring
        working-directory: ./main/oot
        shell: bash
        run: |
          ls -la ../
          ../configure --prefix=/usr/opt/nscldaq/$GITHUB_REF_NAME \
                       --enable-usb=yes \
                       --enable-caen-digitizer-support \
                       --enable-docs \
                       --enable-epics-tools=yes \
                       --with-caen-digitizer-libroot=`cat /usr/opt/CAENDIGITIZERLIBS_PATH` \
                       --with-epics-rootdir=`cat /usr/opt/EPICS_PATH` \
                       --enable-ddas=yes \
                       --enable-ddas-docs=yes \
                       --with-incorp-build-cores=2 \
                       --with-xiaapidir=`cat /usr/opt/XIAAPI_PATH` \
                       --with-plx-sdk=`cat /usr/opt/PLX_PATH` \
                       --with-firmwaredir=`cat /usr/opt/DDASFIRMWARE_PATH` \
                       --with-dspdir=`cat /usr/opt/DDASDSP_PATH` \
                       --with-rootsys=`cat /usr/opt/ROOT_PATH` \
                       CXX=`cat /usr/opt/MPI_PATH`
      - name: Make
        working-directory: ./main/oot
        shell: bash
        run: |
          make -j2 clean && make -j2 all && make -j2 install
          source /usr/cargo/env
          rustup default stable
          cargo install portman
          cargo install nscldaq_ringmaster
          cargo install nscldaq_ringtostdout
          export PATH=$PATH:~/.cargo/bin
          nohup portman > /dev/null 2>&1 &
          sleep 2
          nohup nscldaq_ringmaster -l /dev/null >/dev/null 2>&1 &
          VERBOSE=1 xvfb-run -a make check
      - name: Packaging for complete source distribution
        if: ${{ inputs.packaging == true && inputs.dist-packaging == true}}
        working-directory: ./main/oot
        run: |
          make -j2 dist
      - name: Complete source distribution package
        if: ${{ inputs.packaging == true && inputs.dist-packaging == true}}
        uses: actions/upload-artifact@v4
        with:
          name: Complete source distribution
          path: ./main/oot/nscldaq-${{ github.ref_name }}-dist.tar.gz
      - name: Packaging for binary distribution
        if: ${{ inputs.packaging == true }}
        working-directory: /usr/opt/nscldaq
        run: tar -czf nscldaq-$GITHUB_REF_NAME-${{ inputs.os-version }}.tar.gz $GITHUB_REF_NAME
      - name: Upload binary distribution package
        if: ${{ inputs.packaging == true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.os-version }} binary distribution
          path: /usr/opt/nscldaq/nscldaq-${{ github.ref_name }}-${{ inputs.os-version }}.tar.gz
      - name: Packaging usropt for distribution
        if: ${{ inputs.packaging == true }}
        working-directory: /usr/opt
        run: tar -czf usropt-nscldaq-${{ github.ref_name }}-${{ inputs.os-version }}.tar.gz opt-${{ inputs.os-version }}
      - name: Upload usropt distribution package
        if: ${{ inputs.packaging == true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.os-version }} usropt distribution
          path: /usr/opt/usropt-nscldaq-${{ github.ref_name }}-${{ inputs.os-version }}.tar.gz
